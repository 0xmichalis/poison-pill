/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestPriceOracle,
  TestPriceOracleInterface,
} from "../TestPriceOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102e53803806102e5833981810160405281019061003291906100cf565b8160008190555080600160006101000a81548160ff021916908360ff160217905550505061010f565b600080fd5b6000819050919050565b61007381610060565b811461007e57600080fd5b50565b6000815190506100908161006a565b92915050565b600060ff82169050919050565b6100ac81610096565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b600080604083850312156100e6576100e561005b565b5b60006100f485828601610081565b9250506020610105858286016100ba565b9150509250929050565b6101c78061011e6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063313ce5671461004657806350d25bcd1461006457806391b7f5ed14610082575b600080fd5b61004e61009e565b60405161005b91906100e4565b60405180910390f35b61006c6100b5565b6040516100799190610118565b60405180910390f35b61009c60048036038101906100979190610164565b6100be565b005b6000600160009054906101000a900460ff16905090565b60008054905090565b8060008190555050565b600060ff82169050919050565b6100de816100c8565b82525050565b60006020820190506100f960008301846100d5565b92915050565b6000819050919050565b610112816100ff565b82525050565b600060208201905061012d6000830184610109565b92915050565b600080fd5b610141816100ff565b811461014c57600080fd5b50565b60008135905061015e81610138565b92915050565b60006020828403121561017a57610179610133565b5b60006101888482850161014f565b9150509291505056fea2646970667358221220745a2df8a6c8a7394cab9e4fbfd3165a3f73a5117eebd1e481403599a762c26b64736f6c634300080a0033";

export class TestPriceOracle__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    price: BigNumberish,
    decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestPriceOracle> {
    return super.deploy(
      price,
      decimals,
      overrides || {}
    ) as Promise<TestPriceOracle>;
  }
  getDeployTransaction(
    price: BigNumberish,
    decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(price, decimals, overrides || {});
  }
  attach(address: string): TestPriceOracle {
    return super.attach(address) as TestPriceOracle;
  }
  connect(signer: Signer): TestPriceOracle__factory {
    return super.connect(signer) as TestPriceOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestPriceOracleInterface {
    return new utils.Interface(_abi) as TestPriceOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestPriceOracle {
    return new Contract(address, _abi, signerOrProvider) as TestPriceOracle;
  }
}
